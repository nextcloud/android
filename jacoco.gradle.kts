apply<JacocoPlugin>()

configure<JacocoPluginExtension> {
    toolVersion = extensions
        .getByType<VersionCatalogsExtension>()
        .find("libs")
        .get()
        .findVersion("jacoco")
        .get()
        .displayName
}

val flavor = "gplay"
val buildType = "Debug"
val variant = "$flavor${buildType.capitalize()}"

val jacocoTask = tasks.register<JacocoReport>("jacocoTest${variant.capitalize()}UnitTestReport") {
    reports {
        csv.required = false
        xml.required = true
        html.required = true
    }

    val fileFilter = listOf(
        // data binding
        "**/databinding/*",
        "android/databinding/**/*.class",
        "**/android/databinding/*Binding.class",
        "**/android/databinding/*",
        "**/androidx/databinding/*",
        "**/BR.*",
        // android
        "**/R.class",
        "**/R\$*.class",
        "**/BuildConfig.*",
        "**/Manifest*.*",
        "**/*Test*.*",
        "android/**/*.*",
        // kotlin
        "**/*MapperImpl*.*",
        "**/*\$ViewInjector*.*",
        "**/*\$ViewBinder*.*",
        "**/BuildConfig.*",
        "**/*Component*.*",
        "**/*BR*.*",
        "**/Manifest*.*",
        "**/*\$Lambda\$*.*",
        "**/*Companion*.*",
        "**/*Module*.*",
        "**/*Dagger*.*",
        "**/*Hilt*.*",
        "**/*MembersInjector*.*",
        "**/*_MembersInjector.class",
        "**/*_Factory*.*",
        "**/*_Provide*Factory*.*",
        "**/*Extensions*.*",
        // sealed and data classes
        "**/*\$Result.*",
        "**/*\$Result\$*.*",
        // adapters generated by moshi
        "**/*JsonAdapter.*",
        // Hilt
        "**/*Module.kt",
        "**/di/**",
        "dagger.hilt.internal/*",
        "hilt_aggregated_deps/*",

        "**/*\$Result.*", /* filtering `sealed` and `data` classes */
        "**/*\$Result\$*.*",/* filtering `sealed` and `data` classes */
        "**/*Args*.*", /* filtering Navigation Component generated classes */
        "**/*Directions*.*", /* filtering Navigation Component generated classes */
        "**/*inlined*.class", /* filtering inlined classes */
        "**/composables/**"
        /* INSERT ANY OTHER JUNK YOU WANT FILTERED OUT HERE */
    )

    val androidKotlinTree = project.fileTree("${project.layout.buildDirectory}/tmp/kotlin-classes/${variant}") {
        exclude(fileFilter)
    }
    val javacTree = project.fileTree("${project.layout.buildDirectory}/intermediates/javac/${variant}") {
        exclude(fileFilter)
    }

    sourceDirectories.setFrom(
        project.layout.projectDirectory.dir("src/main/java"),
        project.layout.projectDirectory.dir("src/${flavor}/java"),
        project.layout.projectDirectory.dir("src/${buildType}/java")
    )
    classDirectories.setFrom(
        project.layout.projectDirectory.files(
            project.fileTree(project.layout.buildDirectory.dir("intermediates/javac/${variant}")) { exclude(fileFilter) },
            project.fileTree(project.layout.buildDirectory.dir("tmp/kotlin-classes/$variant")) { exclude(fileFilter) }
        )
    )
    executionData.setFrom(
        project.fileTree(project.layout.buildDirectory.dir("jacoco")) {
            include("**/test${variant.capitalize()}UnitTest.exec")
        }
    )
}

tasks.withType<Test>()
    .matching { task -> task.name == "test${variant.capitalize()}UnitTest" }
    .configureEach {
        extensions.getByType<JacocoTaskExtension>().isIncludeNoLocationClasses = true
        extensions.getByType<JacocoTaskExtension>().setExcludes(listOf("jdk.internal.*"))

        finalizedBy(jacocoTask)
    }
